---
description: 
globs: 
alwaysApply: true
---
## PowerShell 7 环境规则

### 基本原则

- 始终检查当前工作目录，特别是在执行可能有风险的命令前
- 使用绝对路径处理重要文件，避免路径问题
- 命令执行前先确认参数正确性
- 避免在脚本中使用明文凭据
- 所有脚本必须遵循一致的命名和编码规范

### 路径与目录操作

**规范做法:**

- 使用 `Get-Location` 或 `pwd` 确认当前位置
- 在切换目录前验证目录是否存在：`Test-Path $path`
- 使用 `Join-Path` 构建路径而非字符串连接
- 在处理用户输入路径时使用 `Resolve-Path` 获取绝对路径
- 创建临时文件时使用 `[System.IO.Path]::GetTempFileName()`

**禁止做法:**

- 不使用硬编码的绝对路径
- 不在没有验证的情况下访问路径
- 不使用 `cd \` 这样的命令跳转到根目录

### 错误处理

**规范做法:**

- 使用 `try/catch` 块捕获和处理异常
- 设置 `$ErrorActionPreference = 'Stop'` 确保错误被及时捕获
- 使用参数 `-ErrorAction Stop` 强制命令在出错时立即停止
- 使用结构化日志记录错误信息
- 返回有意义的错误代码

**禁止做法:**

- 不静默忽略错误（如 `command 2>$null`）
- 不在生产环境中使用 `$ErrorActionPreference = 'SilentlyContinue'`
- 不使用全局错误变量进行流程控制

### 安全最佳实践

**规范做法:**

- 使用 `SecureString` 处理密码和敏感信息
- 脚本执行策略设置为 `RemoteSigned` 或更严格级别
- 使用受信任的模块和命令
- 验证从网络下载的脚本和模块的数字签名
- 限制执行权限，遵循最小权限原则

**禁止做法:**

- 不在脚本中硬编码凭据
- 不设置 `Set-ExecutionPolicy Bypass` 绕过安全限制
- 不使用 `Invoke-Expression` 执行未验证的字符串
- 不从不受信任的来源下载和执行脚本

### 性能考虑

**规范做法:**

- 使用 `ForEach-Object` 处理较小的集合
- 大数据集使用 `.ForEach()` 方法或传统 `foreach` 循环
- 预先分配数组大小以避免动态增长
- 使用 `[PSCustomObject]` 创建对象而非哈希表
- 使用流水线处理大量数据，避免一次加载全部到内存

**禁止做法:**

- 不在循环中使用低效的命令如 `Add-Content`
- 不过度使用递归，警惕堆栈溢出
- 不在循环中频繁创建和销毁大对象

### 模块和包管理

**规范做法:**

- 使用 `Install-Module` 从 PowerShell Gallery 安装模块
- 指定模块版本以确保兼容性：`Install-Module -Name X -RequiredVersion 1.0.0`
- 使用 `Import-Module` 的 `-Force` 参数确保使用最新版本
- 在模块间共享功能时使用 `Export-ModuleMember`
- 创建自定义模块时包含清晰的文档和示例

**禁止做法:**

- 不使用未经验证的第三方仓库
- 不手动复制模块文件到模块目录
- 不在没有版本控制的情况下更新生产环境中的模块

### 代码风格与规范

**规范做法:**

- 使用 `PascalCase` 命名函数、参数和类
- 使用 `$camelCase` 命名变量
- 添加详细注释说明复杂逻辑
- 遵循一致的缩进风格（推荐4个空格）
- 使用有意义的变量名和函数名

**禁止做法:**

- 不使用单字母变量名（除非是明确的循环计数器）
- 不混合使用不同的命名约定
- 不使用过于复杂的单行命令（管道不超过3-4个）
- 不在生产代码中保留调试语句

### 自动化与持续集成

**规范做法:**

- 编写可重复执行的幂等脚本
- 为重要脚本创建单元测试
- 使用参数而非硬编码的配置
- 使用 `Write-Verbose` 和 `Write-Debug` 提供适当的日志级别
- 遵循"基础设施即代码"原则管理配置

**禁止做法:**

- 不依赖交互式输入在自动化环境中运行
- 不在自动化脚本中使用 `Read-Host`
- 不使用无法在CI/CD流程中验证的复杂依赖

### Python 环境管理

**规范做法:**

- 使用 `uv` 工具管理Python包和虚拟环境
- 在激活虚拟环境前检查其存在性
- 使用 `requirements.txt` 或 `pyproject.toml` 管理依赖
- 为每个项目创建独立的虚拟环境
- 定期更新核心依赖以修复安全漏洞

**禁止做法:**

- 不在全局环境安装项目依赖
- 不混用不同的包管理工具（如同时使用 pip 和 uv）
- 不忽略依赖版本锁定文件
